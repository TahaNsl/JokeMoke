@page "/profile"
@using JokeMoke.Client.Services
@using JokeMoke.Shared
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject IProfileService ProfileService
@inject IEmailService EmailService
@inject IUserService UserService
@inject NavigationManager NavigationManager

<style>
    body {
        background-color: #8EC5FC;
        background-image: linear-gradient(62deg, #8EC5FC 0%, #E0C3FC 100%);
    }
</style>

<h2><b>پروفایل</b></h2> 
<hr />

<EditForm Model="ProfileService">

    <div class="container">

      <div class="row">

        <div class="col">
           <div>
                    @if (@ProfileService.ProfilePicUrl == null)
                    {
                    <img src="/Images/user-profile.png" style="width: 250px; height: 250px; border-radius: 10px;"/> <br /> <br />
                    }
                    else
                    {
                    <img src="@ProfileService.ProfilePicUrl" style="width: 250px; height: 250px; border-radius: 10px;"/> <br /> <br />
                    }
              <InputFile OnChange="@OnInputFileChanged"></InputFile>
           </div>
        </div>

        <div class="col">
        <div>
            <lable for="Username">نام کاربری</lable>
            <InputText @bind-Value="ProfileService.UserName" class="form-control" placeholder="نام کاربری"></InputText>
        </div>
        <br />

        <div>
            <lable for="Email">ایمیل</lable>
            <InputText @bind-Value="ProfileService.Email" class="form-control" placeholder="ایمیل"></InputText>
        </div>
        <br />

        <div>
            <lable for="heroname">پسوورد</lable>
            <InputText @bind-Value="ProfileService.Password" class="form-control" placeholder="پسوورد"></InputText>
        </div>
        <br />
        </div>

      </div>
    </div>

    <br />
    <br />
    <hr />

    <button class="btn btn-primary" @onclick="ProfileService.UpdateProfile">آپدیت پروفایل</button>
    <span>&nbsp;&nbsp;</span>@ProfileService.Message

    <br />

</EditForm>

<br />

    <button class="btn btn-success" @onclick="SendMail">ارسال ایمیل</button>
    <button class="btn btn-danger" @onclick="LogOut">خروج</button>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    public async Task SendMail()
    {
        var email = ProfileService.Email;
        await EmailService.Sendmail(email);
    }

    public async Task LogOut()
    {
        await UserService.LogOutUser();
        NavigationManager.NavigateTo("/");
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        
        // Get the file
        var file = inputFileChangeEvent.File;

        // Read the file in a byte array
        var buffer = new byte[file.Size];
        await file.OpenReadStream(1512000).ReadAsync(buffer);

        // Convert byte array to base 64 string
        ProfileService.ProfilePicUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
        
        
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState; //_authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if(user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            ProfileService.Id = Convert.ToInt32(claim?.Value);
            await ProfileService.GetProfile();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }
}